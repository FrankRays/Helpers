//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Globalization;
using System.Collections;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;
using System.Xml.Linq;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Text;

namespace Abarsoft.Helpers
{
    
    public static class ExtensionesType
    {
        #region Metodos
    
        public static MethodInfo GetMethod(this Type type, string nombre, BindingFlags bindingFlags, Type[] parametros, params Type[] argumentosGenericos)
        {
            var methodInfos = type.GetMethods(bindingFlags);
    
            for (var i = 0; i < methodInfos.Length; i++)
            {
                var methodInfo = methodInfos[i];
    
                if (methodInfo.Name != nombre)
                {
                    continue;
                }
    
                if (methodInfo.IsGenericMethodDefinition)
                {
                    if (argumentosGenericos == null || argumentosGenericos.Length == 0)
                    {
                        continue;
                    }
    
                    var argumentosGenericos2 = methodInfo.GetGenericArguments();
    
                    if (argumentosGenericos.Length != argumentosGenericos2.Length)
                    {
                        continue;
                    }
                        
                    methodInfo = methodInfo.MakeGenericMethod(argumentosGenericos);
                }
                else if (argumentosGenericos != null && argumentosGenericos.Length > 0)
                {
                    continue;
                }
    
                var parameterInfos = methodInfo.GetParameters();
    
                if (parametros == null || parametros.Length == 0)
                {
                    if (parameterInfos.Length == 0)
                    {
                        return methodInfo;
                    }
    
                    continue;
                }
                else if (parametros.Length == parameterInfos.Length)
                {
                    var sonParametrosIguales = true;
    
                    for (var j = 0; j < parametros.Length; j++)
                    {
                        if (parametros[j] != parameterInfos[j].ParameterType)
                        {
                            sonParametrosIguales = false;
                            break;
                        }
                    }
    
                    if (sonParametrosIguales)
                    {
                        return methodInfo;
                    }
                }
            }
                
            return null;
        }
        
        #endregion
    }
    public static class ExtensionesIQueriable
    {
        #region Metodos
    
        private static Expression CrearOrdenamientoNucleo<T>(Expression expression, PropertyDescriptor propertyDescriptor, ListSortDirection listSortDirection)
        {
            var type = propertyDescriptor.ComponentType;
            var parameterExpression = Expression.Parameter(type);
            var nombreMetodo = string.Empty;
    
            if (typeof(IOrderedQueryable<T>) == expression.Type)
            {
                if (listSortDirection == ListSortDirection.Ascending)
                {
                    nombreMetodo = "ThenBy";
                }
                else
                {
                    nombreMetodo = "ThenByDescending";
                }
            }
            else
            {
                if (listSortDirection == ListSortDirection.Ascending)
                {
                    nombreMetodo = "OrderBy";
                }
                else
                {
                    nombreMetodo = "OrderByDescending";
                }
            }
    
            return Expression.Call(typeof(Queryable), nombreMetodo, new Type[] { type, propertyDescriptor.PropertyType }, expression, Expression.Lambda(Expression.MakeMemberAccess(parameterExpression, type.GetProperty(propertyDescriptor.Name)), parameterExpression));
        }
    
        public static IQueryable<T> CrearOrdenamiento<T>(this IQueryable<T> iQueryable, PropertyDescriptor propertyDescriptor, ListSortDirection listSortDirection)
        {
            if (iQueryable == null)
            {
                throw new ArgumentNullException("iQueryable");
            }
    
            if (propertyDescriptor == null)
            {
                throw new ArgumentNullException("propertyDescriptor");
            }
    
            return iQueryable.Provider.CreateQuery<T>(CrearOrdenamientoNucleo<T>(iQueryable.Expression, propertyDescriptor, listSortDirection));
        }
    
        public static IQueryable<T> CrearOrdenamiento<T>(this IQueryable<T> iQueryable, ListSortDescriptionCollection listSortDescriptionCollection)
        {
            if (iQueryable == null)
            {
                throw new ArgumentNullException("iQueryable");
            }
    
            if (listSortDescriptionCollection == null)
            {
                throw new ArgumentNullException("listSortDescriptionCollection");
            }
    
            var expression = iQueryable.Expression;
    
            for (var i = 0; i < listSortDescriptionCollection.Count; i++)
            {
                expression = CrearOrdenamientoNucleo<T>(expression, listSortDescriptionCollection[i].PropertyDescriptor, listSortDescriptionCollection[i].SortDirection);
            }
    
            return iQueryable.Provider.CreateQuery<T>(expression);
        }        
            
        #endregion
    }
    
    public interface IConvertidor
    {
        #region Metodos
        
        XElement ToXElement(MemberInfo memberInfo);
        XElement ToXElement(ElementInit elementInit);
        XElement ToXElement(MemberBinding memberBinding);
        XElement ToXElement(Expression expression);
        MemberInfo ToMemberInfo(XElement xElement);
        T ToMemberInfo<T>(XElement xElement) where T: MemberInfo;
        ElementInit ToElementInit(XElement xElement);
        MemberBinding ToMemberBinding(XElement xElement);
        T ToMemberBinding<T>(XElement xElement) where T : MemberBinding;
        Expression ToExpression(XElement xElement);
    	T ToExpression<T>(XElement xElement) where T : Expression;
        
        #endregion
    }
    
    public class Convertidor : IConvertidor
    {
        #region Campos
                                                            
        private static readonly Type[] _tipos = new Type[] { 
            typeof(Enum), //0
            typeof(string), //1
            typeof(IConvertible) //2
        };
        private static readonly Type[] _tiposVacio = new Type[0];
                                                            
        #endregion
        #region Propiedades
                                                            
        private Dictionary<string, ParameterExpression> ParameterExpressions
        {
            get
            {
                if (this._parametersExpressions == null)
                {
                    this._parametersExpressions = new Dictionary<string, ParameterExpression>();
                }
                                                            
                return this._parametersExpressions;
            }
        }
        private Dictionary<string, ParameterExpression> _parametersExpressions;
            
        private Dictionary<int, object> NoConvertibles
        {
            get
            {
                if (this._noConvertibles == null)
                {
                    this._noConvertibles = new Dictionary<int, object>();
                }
            
                return this._noConvertibles;
            }
        }
        private Dictionary<int, object> _noConvertibles;
                                                            
        #endregion
        #region Metodos
                                                                        
        public static XAttribute CrearXAttribute<TEntrada, TSalida>(string nombre, TEntrada tEntrada, Func<TEntrada, TSalida> metodo)
        {
            if (tEntrada == null || metodo == null)
            {
                return new XAttribute(nombre, string.Empty);
            }
                                                                                            
            return new XAttribute(nombre, metodo(tEntrada));
        }
                                                                        
        public static XElement CrearXElement<TEntrada, TSalida>(string nombre, TEntrada tEntrada, Func<TEntrada, TSalida> metodo)
        {
            if (tEntrada == null || metodo == null)
            {
                return new XElement(nombre);
            }
                                                                        
            return new XElement(nombre, metodo(tEntrada));
        }
                                          
        public static XElement CrearXElement<TEntrada, TSalida>(string nombre, IEnumerable<TEntrada> iEnumerable, Func<TEntrada, TSalida> metodo)
        {
            if (iEnumerable == null || !iEnumerable.GetEnumerator().MoveNext())
            {
                return new XElement(nombre);
            }
                                                                        
            return new XElement(nombre, iEnumerable.Select(metodo));
        }
                                                                        
        public static IEnumerable<T> ParseElements<T>(XElement xElement, Func<XElement, T> metodo)
        {
            if (xElement != null && !xElement.IsEmpty)
            {
                var xElements = xElement.Elements();
                                                                        
                if (xElements.GetEnumerator().MoveNext())
                {
                    return xElements.Select(metodo);
                }
            }
                                                                        
            return null;
        }                                        
                                                                       
        public static IEnumerable<T> ParseElements<T>(string nombre, XElement xElement, Func<XElement, T> metodo)
        {
            if (xElement != null && !xElement.IsEmpty)
            {
                return ParseElements<T>(xElement.Element(nombre), metodo);
            }
                                                                        
            return null;
        }                                        
                                                                       
        public static T ParseFirstNode<T>(XElement xElement, Func<XElement, T> metodo)
        {
            if (xElement != null && metodo != null && !xElement.IsEmpty)
            {
                var firstElement = xElement.FirstNode as XElement;
                                                                        
                if (firstElement != null)
                {
                    return metodo(firstElement);
                }
            }
                                                                        
            return default(T);
        }                                        
                                                                       
        public static T ParseFirstNode<T>(string nombre, XElement xElement, Func<XElement, T> metodo)
        {
            if (xElement != null && !xElement.IsEmpty)
            {
                return ParseFirstNode<T>(xElement.Element(nombre), metodo);
            }
                                                                        
            return default(T);
        }                                        
                                                                       
        public static T ParseValueXElement<T>(XElement xElement, Func<string, T> metodo)
        {
            if (xElement != null && metodo != null && !xElement.IsEmpty)
            {
                return metodo(xElement.Value);
            }
                                                                        
            return default(T);
        }
                                                                        
        public static T ParseValueXElement<T>(XElement xElement, Type type, Func<string, Type, T> metodo)
        {
            if (xElement != null && metodo != null && !xElement.IsEmpty)
            {
                return metodo(xElement.Value, type);
            }
                                                                        
            return default(T);
        }
                                                                        
        public static T ParseValueXElement<T>(string nombre, XElement xElement, Func<string, T> metodo)
        {
            if (xElement != null && !xElement.IsEmpty)
            {
                return ParseValueXElement<T>(xElement.Element(nombre), metodo);
            }
                                                                        
            return default(T);
        }
                                                                        
        public static T ParseValueXElement<T>(string nombre, XElement xElement, Type type, Func<string, Type, T> metodo)
        {
            if (xElement != null && !xElement.IsEmpty)
            {
                return ParseValueXElement<T>(xElement.Element(nombre), type, metodo);
            }
                                                                        
            return default(T);
        }
                                                                        
        public static T ParseValueXAttribute<T>(XAttribute xAttribute, Func<string, T> metodo)
        {
            if (xAttribute != null && metodo != null)
            {
                return metodo(xAttribute.Value);
            }
                                                                                            
            return default(T);
        }
                                                                                            
        public static T ParseValueXAttribute<T>(XAttribute xAttribute, Type type, Func<string, Type, T> metodo)
        {
            if (xAttribute != null && metodo != null)
            {
                return metodo(xAttribute.Value, type);
            }
                                                                                            
            return default(T);
        }
                                                                                            
        public static T ParseValueXAttribute<T>(string nombre, XElement xElement, Func<string, T> metodo)
        {
            if (xElement != null)
            {
                return ParseValueXAttribute<T>(xElement.Attribute(nombre), metodo);
            }
                                                                                            
            return default(T);
        }
                                                                                            
        public static T ParseValueXAttribute<T>(string nombre, XElement xElement, Type type, Func<string, Type, T> metodo)
        {
            if (xElement != null)
            {
                return ParseValueXAttribute<T>(xElement.Attribute(nombre), type, metodo);
            }
                                                                                            
            return default(T);
        }
                                                            
        protected T CrearXElementGenerico<T>(T valor)
        {
            return (T)this.CrearXElement(valor);
        }
                                                            
        protected T ParseGenerico<T>(string valorString)
        {
            return (T)this.Parse(valorString, typeof(T));
        }
                                                            
        protected T ParseGenerico<T>(XElement xElement)
        {
            return (T)this.Parse(xElement);
        }
                                                        
        protected virtual object Parse(string valorString, Type type)
        {
            if (string.IsNullOrEmpty(valorString))
            {
                return null;
            }
            else if (_tipos[0].IsAssignableFrom(type))
            {
                return Enum.Parse(type, valorString);
            }
            else if (_tipos[1].IsAssignableFrom(type))
            {
                return valorString;
            }
            else if (_tipos[2].IsAssignableFrom(type))
            {
                return Convert.ChangeType(valorString, type, CultureInfo.CurrentCulture);
            }                        
                                                       
            return null;
        }
                                                       
        protected virtual object Parse(XElement xElement)
        {
            if (xElement == null)
            {
                return null;
            }
                            
            switch (xElement.Name.LocalName)
            {
                case "NoConvertible":
                    return this.ParseNoConvertible(xElement);
                case "Expression":
                	return this.ParseExpression(xElement);
                case "Type":
                    return this.ParseType(xElement);
                case "PropertyInfo":
                    return this.ParsePropertyInfo(xElement);
                case "ConstructorInfo":
                    return this.ParseConstructorInfo(xElement);
                case "MethodInfo":
                    return this.ParseMethodInfo(xElement);
                case "FieldInfo":
                    return this.ParseFieldInfo(xElement);
                case "ElementInit":
                    return this.ParseElementInit(xElement);
                case "MemberAssignment":
                    return this.ParseMemberAssignment(xElement);
                case "MemberListBinding":
                    return this.ParseMemberListBinding(xElement);
                case "MemberMemberBinding":
                    return this.ParseMemberMemberBinding(xElement);
                default:
                    return null;
            }
        }
                                           
        protected virtual object ParseNoConvertible(XElement xElement)
        {
            var hashCode = ParseValueXElement("HashCode", xElement, this.ParseGenerico<int>);
            object referencia;
                    
            if (this.NoConvertibles.TryGetValue(hashCode, out referencia))
            {
                return referencia;
            }
                    
            return null;
        }
                                                        
        protected virtual string ObtenerNombreType(Type type)
        {
            if (type == null)
            {
                return null;
            }
                                            
            var nombre = type.AssemblyQualifiedName;
                                                        
            if (string.IsNullOrEmpty(nombre))
            {
                nombre = type.Name;
            }
                                                        
            return nombre;
        }
                                                           
        #region ToXElement
           
        protected virtual XElement CrearXElementPropertyInfoAnonymousType(PropertyInfo propertyInfo)
        {
            if (propertyInfo == null)
            {
                return null;
            }
        
            return new XElement("PropertyInfo",
                CrearXElement("Name", propertyInfo.Name, this.CrearXElement),
                CrearXElement("PropertyType", propertyInfo.PropertyType, this.CrearXElementType));
        }
        
        protected virtual XElement CrearXElementAnonymousType(Type type)
        {
            if (type == null)
            {
                return null;
            }
        
            return new XElement("Type",
                CrearXElement("Name", type, this.ObtenerNombreType),
                CrearXElement("MemberType", type.MemberType, this.CrearXElementGenerico),
                CrearXElement("Properties", type.GetProperties(), this.CrearXElementPropertyInfoAnonymousType),
                CrearXElement("ParametersConstructor", type.GetProperties(), this.CrearXElementPropertyInfoAnonymousType));
        }            
                               
        protected virtual XElement CrearXElementNoConvertible(object valor)
        {
            var hashCode = valor.GetHashCode();
                                                                        
            if (!this.NoConvertibles.ContainsKey(hashCode))
            {
                this.NoConvertibles.Add(hashCode, valor);
            }
                            
            return new XElement(
                "NoConvertible",
                CrearXElement("HashCode", hashCode, this.CrearXElementGenerico));
        }
                                                        
        protected virtual XElement CrearXElementType(Type type)
        {
            if (type == null)
            {
                return null;
            }
                   
            return new XElement(
                "Type",
                CrearXElement("MemberType", type.MemberType, this.CrearXElementGenerico),
                CrearXElement("Name", type, this.ObtenerNombreType));
        }
                                                                        
        protected virtual XElement CrearXElementPropertyInfo(PropertyInfo propertyInfo)
        {
            if (propertyInfo == null)
            {
                return null;
            }
                                            
            return new XElement(
                "PropertyInfo",
                CrearXElement("MemberType", propertyInfo.MemberType, this.CrearXElementGenerico),
                CrearXElement("Name", propertyInfo.Name, this.CrearXElement),
                CrearXElement("DeclaringType", propertyInfo.DeclaringType, this.CrearXElementType),
                CrearXElement("IndexParameters", propertyInfo.GetIndexParameters().Select(p => p.ParameterType), this.CrearXElementType));
        }
                                                                        
        protected virtual XElement CrearXElementConstructorInfo(ConstructorInfo constructorInfo)
        {
            if (constructorInfo == null)
            {
                return null;
            }
                                            
            return new XElement(
                "ConstructorInfo",
                CrearXElement("MemberType", constructorInfo.MemberType, this.CrearXElementGenerico),
                CrearXElement("Name", constructorInfo.Name, this.CrearXElement),
                CrearXElement("DeclaringType", constructorInfo.DeclaringType, this.CrearXElementType),
                CrearXElement("Parameters", constructorInfo.GetParameters().Select(p => p.ParameterType), this.CrearXElementType));
        }
                                                                        
        protected virtual XElement CrearXElementMethodInfo(MethodInfo methodInfo)
        {
            if (methodInfo == null)
            {
                return null;
            }
                                            
            return new XElement(
                "MethodInfo",
                CrearXElement("MemberType", methodInfo.MemberType, this.CrearXElementGenerico),
                CrearXElement("Name", methodInfo.Name, this.CrearXElement),
                CrearXElement("DeclaringType", methodInfo.DeclaringType, this.CrearXElementType),
                CrearXElement("Parameters", methodInfo.GetParameters().Select(p => p.ParameterType), this.CrearXElementType),
                CrearXElement("GenericArguments", methodInfo.GetGenericArguments(), this.CrearXElementType));
        }
                                                                        
        protected virtual XElement CrearXElementFieldInfo(FieldInfo fieldInfo)
        {
            if (fieldInfo == null)
            {
                return null;
            }
                                            
            return new XElement(
                "FieldInfo",
                CrearXElement("MemberType", fieldInfo.MemberType, this.CrearXElementGenerico),
                CrearXElement("Name", fieldInfo.Name, this.CrearXElement),
                CrearXElement("DeclaringType", fieldInfo.DeclaringType, this.CrearXElementType));
        }
                                                                        
        protected virtual XElement CrearXElementElementInit(ElementInit elementInit)
        {
            if (elementInit == null)
            {
                return null;
            }
                                            
            return new XElement(
                "ElementInit",
                CrearXElement("AddMethod", elementInit.AddMethod, this.CrearXElementMethodInfo),
                CrearXElement("Arguments", elementInit.Arguments, this.CrearXElementExpression));
        }
                                                                        
        protected virtual XElement CrearXElementMemberAssignment(MemberAssignment memberAssignment)
        {
            if (memberAssignment == null)
            {
                return null;
            }
                                            
            return new XElement(
                "MemberAssignment",
                CrearXElement("BindingType", memberAssignment.BindingType, this.CrearXElementGenerico),
                CrearXElement("Member", memberAssignment.Member, this.CrearXElementMemberInfo),
                CrearXElement("Expression", memberAssignment.Expression, this.CrearXElementExpression));
        }
                                                                        
        protected virtual XElement CrearXElementMemberListBinding(MemberListBinding memberListBinding)
        {
            if (memberListBinding == null)
            {
                return null;
            }
                                            
            return new XElement(
                "MemberListBinding",
                CrearXElement("BindingType", memberListBinding.BindingType, this.CrearXElementGenerico),
                CrearXElement("Member", memberListBinding.Member, this.CrearXElementMemberInfo),
                CrearXElement("Initializers", memberListBinding.Initializers, this.CrearXElementElementInit));
        }
                                                                        
        protected virtual XElement CrearXElementMemberMemberBinding(MemberMemberBinding memberMemberBinding)
        {
            if (memberMemberBinding == null)
            {
                return null;
            }
                                            
            return new XElement(
                "MemberMemberBinding",
                CrearXElement("BindingType", memberMemberBinding.BindingType, this.CrearXElementGenerico),
                CrearXElement("Member", memberMemberBinding.Member, this.CrearXElementMemberInfo),
                CrearXElement("Bindings", memberMemberBinding.Bindings, this.CrearXElementMemberBinding));
        }
                                                            
        protected virtual XElement CrearXElementExpression(Expression expression)
        {
            if (expression == null)
            {
                return null;
            }
                                            
            return new XElement(
                "Expression",
                expression.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance).Select(p => CrearXElement(p.Name, p.GetValue(expression, null), this.CrearXElement)));
        }
                                                                        
        protected virtual XElement CrearXElementMemberInfo(MemberInfo memberInfo)
        {
            if (memberInfo == null)
            {
                return null;
            }
                                            
            switch (memberInfo.MemberType)
            {
                case MemberTypes.NestedType:
                case MemberTypes.TypeInfo:
                    return this.CrearXElementType((Type)memberInfo);
                case MemberTypes.Property:
                    return this.CrearXElementPropertyInfo((PropertyInfo)memberInfo);
                case MemberTypes.Method:
                    return this.CrearXElementMethodInfo((MethodInfo)memberInfo);
                case MemberTypes.Constructor:
                    return this.CrearXElementConstructorInfo((ConstructorInfo)memberInfo);
                case MemberTypes.Field:
                    return this.CrearXElementFieldInfo((FieldInfo)memberInfo);
                default:
                    return null;
            }
        }
                                                                        
        protected virtual XElement CrearXElementMemberBinding(MemberBinding memberBinding)
        {
            if (memberBinding == null)
            {
                return null;
            }
                                            
            switch (memberBinding.BindingType)
            {
                case MemberBindingType.Assignment:
                    return this.CrearXElementMemberAssignment((MemberAssignment)memberBinding);
                case MemberBindingType.ListBinding:
                    return this.CrearXElementMemberListBinding((MemberListBinding)memberBinding);
                case MemberBindingType.MemberBinding:
                    return this.CrearXElementMemberMemberBinding((MemberMemberBinding)memberBinding);
                default:
                    return null;
            }
        }
                                                            
        protected virtual object CrearXElement(object valor)
        {
            if (valor == null)
            {
                return null;
            }         
            else if (valor is IConvertible)
            {
                return valor;
            }
                            
            var memberInfo = valor as MemberInfo;
                                        
            if (memberInfo != null)
            {
                return this.CrearXElementMemberInfo(memberInfo);
            }
                
            var expression = valor as Expression;
                            
            if (expression != null)
            {
                return this.CrearXElementExpression(expression);
            }
                
            var expressions = valor as IEnumerable<Expression>;
                            
            if (expressions != null)
            {
                return expressions.Select(this.CrearXElementExpression);
            }
                                        
            var memberInfos = valor as IEnumerable<MemberInfo>;
                            
            if (memberInfos != null)
            {
                return memberInfos.Select(this.CrearXElementMemberInfo);
            }
                            
            var elementInits = valor as IEnumerable<ElementInit>;                
                                        
            if (elementInits != null)
            {
                return elementInits.Select(this.CrearXElementElementInit);
            }
                        
            var memberBindings = valor as IEnumerable<MemberBinding>;
                        
            if (memberBindings != null)
            {
                return memberBindings.Select(this.CrearXElementMemberBinding);
            }
                
            var elementInit = valor as ElementInit;
                
            if (elementInit != null)
            {
                return this.CrearXElementElementInit(elementInit);
            }
                
            var memberBinding = valor as MemberBinding;
                
            if (memberBinding != null)
            {
                return this.CrearXElementMemberBinding(memberBinding);
            }
                        		                        
            return this.CrearXElementNoConvertible(valor);
        }
                
        public XElement ToXElement(MemberInfo memberInfo)
        {
            return this.CrearXElementMemberInfo(memberInfo);
        }
                                                        
        public XElement ToXElement(ElementInit elementInit)
        {
            return this.CrearXElementElementInit(elementInit);
        }
                                            
        public XElement ToXElement(MemberBinding memberBinding)
        {
            return this.CrearXElementMemberBinding(memberBinding);
        }
                
        public XElement ToXElement(Expression expression)
        {
            return this.CrearXElementExpression(expression);
        }
                                                                        
        #endregion
        #region ToMemberInfo
                                                    
        protected virtual Type ParseType(XElement xElement)
        {
            return ParseValueXElement("Name", xElement, Type.GetType);
        }
                                                    
        protected virtual FieldInfo ParseFieldInfo(XElement xElement)
        {
            return ParseFirstNode("DeclaringType", xElement, this.ParseType).GetField(
                ParseValueXElement("Name", xElement, this.ParseGenerico<string>),
                BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static | BindingFlags.FlattenHierarchy);
        }
                                                    
        protected virtual PropertyInfo ParsePropertyInfo(XElement xElement)
        {
            var declaringType = ParseFirstNode("DeclaringType", xElement, this.ParseType);
            var name = ParseValueXElement("Name", xElement, this.ParseGenerico<string>);
            var indexParameters = ParseElements("IndexParameters", xElement, this.ParseType);
                            
            return declaringType.GetProperty(
                name,
                BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static | BindingFlags.FlattenHierarchy,
                null,
                null,
                (indexParameters == null) ? _tiposVacio : indexParameters.ToArray(),
                null);
        }
                                                    
        protected virtual MethodInfo ParseMethodInfo(XElement xElement)
        {
            var declaringType = ParseFirstNode("DeclaringType", xElement, this.ParseType);
            var name = ParseValueXElement("Name", xElement, this.ParseGenerico<string>);
            var parameters = ParseElements("Parameters", xElement, this.ParseType);
            var genericArguments = ParseElements("GenericArguments", xElement, this.ParseType);
                            
            return declaringType.GetMethod(
                name, 
                BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static | BindingFlags.FlattenHierarchy,
                (parameters == null) ? _tiposVacio : parameters.ToArray(),
                (genericArguments == null) ? _tiposVacio : genericArguments.ToArray());
        }
                                                    
        protected virtual ConstructorInfo ParseConstructorInfo(XElement xElement)
        {
            var declaringType = ParseFirstNode("DeclaringType", xElement, this.ParseType);
            var parameters = ParseElements("Parameters", xElement, this.ParseType);
                            
            return declaringType.GetConstructor(
                BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance,
                null,
                (parameters == null) ? _tiposVacio : parameters.ToArray(),
                null);
        }
                                                    
        protected virtual MemberInfo ParseMemberInfo(XElement xElement)
        {
            switch (ParseValueXElement("MemberType", xElement, this.ParseGenerico<MemberTypes>))
            {
                case MemberTypes.Property:
                    return this.ParsePropertyInfo(xElement);
                case MemberTypes.Field:
                    return this.ParseFieldInfo(xElement);
                case MemberTypes.NestedType:
                case MemberTypes.TypeInfo:
                    return this.ParseType(xElement);
                case MemberTypes.Method:
                    return this.ParseMethodInfo(xElement);
                case MemberTypes.Constructor:
                    return this.ParseConstructorInfo(xElement);
                default:
                    return null;
            }
        }
                                                    
        public MemberInfo ToMemberInfo(XElement xElement)
        {
            return this.ParseGenerico<MemberInfo>(xElement);
        }
                                                
        public T ToMemberInfo<T>(XElement xElement) where T: MemberInfo
        {
            return this.ParseGenerico<T>(xElement);
        }
                                                    
        #endregion
        #region ToElementInit
                                                    
        protected virtual ElementInit ParseElementInit(XElement xElement)
        {
            return Expression.ElementInit(ParseFirstNode("AddMethod", xElement, this.ParseMethodInfo), ParseElements("Arguments", xElement, this.ParseExpression));
        }
                                                    
        public ElementInit ToElementInit(XElement xElement)
        {
            return this.ParseGenerico<ElementInit>(xElement);
        }
                                                    
        #endregion
        #region ToMemberBinding
                                
        protected virtual MemberAssignment ParseMemberAssignment(XElement xElement)
        {
            return Expression.Bind(ParseFirstNode("Member", xElement, this.ParseMemberInfo), ParseFirstNode("Expression", xElement, this.ParseExpression));
        }
                                
        protected virtual MemberListBinding ParseMemberListBinding(XElement xElement)
        {
            return Expression.ListBind(ParseFirstNode("Member", xElement, this.ParseMemberInfo), ParseElements("Initializers", xElement, this.ParseElementInit));
        }
                                
        protected virtual MemberMemberBinding ParseMemberMemberBinding(XElement xElement)
        {
            return Expression.MemberBind(ParseFirstNode("Member", xElement, this.ParseMemberInfo), ParseElements("Bindings", xElement, this.ParseMemberBinding));
        }
                                                    
        protected virtual MemberBinding ParseMemberBinding(XElement xElement)
        {
            switch (ParseValueXElement("BindingType", xElement, this.ParseGenerico<MemberBindingType>))
            {
                case MemberBindingType.Assignment:
                    return this.ParseMemberAssignment(xElement);
                case MemberBindingType.ListBinding:
                    return this.ParseMemberListBinding(xElement);
                case MemberBindingType.MemberBinding:
                    return this.ParseMemberMemberBinding(xElement);
                default:
                    return null;
            }
        }
                                                    
        public MemberBinding ToMemberBinding(XElement xElement)
        {
            return this.ParseGenerico<MemberBinding>(xElement);
        }
                                                
        public T ToMemberBinding<T>(XElement xElement) where T: MemberBinding
        {
            return this.ParseGenerico<T>(xElement);
        }
                                                    
        #endregion
        #region ToExpression
                                
        protected virtual InvocationExpression ParseInvocationExpression(XElement xElement)
        {
            return Expression.Invoke(
                ParseFirstNode("Expression", xElement, this.ParseExpression), 
                ParseElements("Arguments", xElement, this.ParseExpression));
        }
                                
        protected virtual MemberExpression ParseMemberExpression(XElement xElement)
        {
            return Expression.MakeMemberAccess(
                ParseFirstNode("Expression", xElement, this.ParseExpression), 
                ParseFirstNode("Member", xElement, this.ParseMemberInfo));
        }
                                
        protected virtual MemberInitExpression ParseMemberInitExpression(XElement xElement)
        {
            return Expression.MemberInit(
                ParseFirstNode("NewExpression", xElement, this.ParseNewExpression), 
                ParseElements("Bindings", xElement, this.ParseMemberBinding));
        }
                                
        protected virtual TypeBinaryExpression ParseTypeBinaryExpression(XElement xElement)
        {
            return Expression.TypeIs(
                ParseFirstNode("Expression", xElement, this.ParseExpression), 
                ParseFirstNode("TypeOperand", xElement, this.ParseType));
        }
                                                    
        protected virtual ConditionalExpression ParseConditionalExpression(XElement xElement)
        {
            return Expression.Condition(
                ParseFirstNode("Test", xElement, this.ParseExpression), 
                ParseFirstNode("IfTrue", xElement, this.ParseExpression), 
                ParseFirstNode("IfFalse", xElement, this.ParseExpression), 
                ParseFirstNode("Type", xElement, this.ParseType));
        }
                                    
        protected virtual ListInitExpression ParseListInitExpression(XElement xElement)
        {
            return Expression.ListInit(
                ParseFirstNode("NewExpression", xElement, this.ParseNewExpression), 
                ParseElements("Initializers", xElement, this.ParseElementInit));
        }
                                
        protected virtual LambdaExpression ParseLambdaExpression(XElement xElement)
        {
            return Expression.Lambda(
                ParseFirstNode("Type", xElement, this.ParseType), 
                ParseFirstNode("Body", xElement, this.ParseExpression), 
                ParseValueXElement("Name", xElement, this.ParseGenerico<string>), 
                ParseValueXElement("TailCall", xElement, this.ParseGenerico<bool>), 
                ParseElements("Parameters", xElement, this.ParseParameterExpression));
        }
                                                    
        protected virtual MethodCallExpression ParseMethodCallExpression(XElement xElement)
        {
            return Expression.Call(
                ParseFirstNode("Object", xElement, this.ParseExpression), 
                ParseFirstNode("Method", xElement, this.ParseMethodInfo), 
                ParseElements("Arguments", xElement, this.ParseExpression));
        }
                            
        protected virtual UnaryExpression ParseUnaryExpression(XElement xElement, ExpressionType expressionType)
        {
            return Expression.MakeUnary(
                expressionType,
                ParseFirstNode("Operand", xElement, this.ParseExpression),
                ParseFirstNode("Type", xElement, this.ParseType),
                ParseFirstNode("Method", xElement, this.ParseMethodInfo));
        }
                            
        protected virtual BinaryExpression ParseBinaryExpression(XElement xElement, ExpressionType expressionType)
        {
            return Expression.MakeBinary(
                expressionType,
                ParseFirstNode("Left", xElement, this.ParseExpression),
                ParseFirstNode("Right", xElement, this.ParseExpression),
                ParseValueXElement("IsLiftedToNull", xElement, this.ParseGenerico<bool>),
                ParseFirstNode("Method", xElement, this.ParseMethodInfo),
                ParseFirstNode("Conversion", xElement, this.ParseLambdaExpression));
        }
                                   
        protected virtual ParameterExpression ParseParameterExpression(XElement xElement)
        {
            var type = ParseFirstNode("Type", xElement, this.ParseType);
            var name = ParseValueXElement("Name", xElement, this.ParseGenerico<string>);
            var id = name + this.ObtenerNombreType(type);
            ParameterExpression parameterExpression;
                                                    
            if (this.ParameterExpressions.TryGetValue(id, out parameterExpression))
            {
                return parameterExpression;
            }
                                                    
            parameterExpression = Expression.Parameter(type, name);
            this.ParameterExpressions.Add(id, parameterExpression);
                                                    
            return parameterExpression;
        }
                                                    
        protected virtual NewExpression ParseNewExpression(XElement xElement)
        {
            var constructor = ParseFirstNode("Constructor", xElement, this.ParseConstructorInfo);
            var members = ParseElements("Members", xElement, this.ParseMemberInfo);
            var arguments = ParseElements("Arguments", xElement, this.ParseExpression);
                            
            if (members == null)
            {
                return Expression.New(constructor, arguments);
            }
                                                        
            return Expression.New(constructor, arguments, members);
        }
                            
        protected virtual ConstantExpression ParseConstantExpression(XElement xElement)
        {
            var type = ParseFirstNode("Type", xElement, this.ParseType);
            var value = ParseFirstNode("Value", xElement, this.Parse);
                            
            if (value == null)
            {
                value = ParseValueXElement("Value", xElement, type, this.Parse);
            }
                            
            return Expression.Constant(value, type);
        }
                                     
        protected virtual NewArrayExpression ParseNewArrayExpression(XElement xElement, ExpressionType expressionType)
        {
            var elementType = ParseFirstNode("Type", xElement, this.ParseType).GetElementType();
            var expressions = ParseElements("Expressions", xElement, this.ParseExpression);
                                                    
            switch (expressionType)
            {
                case ExpressionType.NewArrayInit:
                    return Expression.NewArrayInit(elementType, expressions);
                case ExpressionType.NewArrayBounds:
                    return Expression.NewArrayBounds(elementType, expressions);
                default:
                    return null;
            }
        }
                            
        protected virtual Expression ParseExpression(XElement xElement)
        {
            var expressionType = ParseValueXElement("NodeType", xElement, this.ParseGenerico<ExpressionType>);
                                                    
            switch (expressionType)
            {
                case ExpressionType.MemberAccess:
                    return this.ParseMemberExpression(xElement);
                case ExpressionType.Parameter:
                    return this.ParseParameterExpression(xElement);
                case ExpressionType.Constant:
                    return this.ParseConstantExpression(xElement);
                case ExpressionType.Lambda:
                    return this.ParseLambdaExpression(xElement);
                case ExpressionType.Call:
                    return this.ParseMethodCallExpression(xElement);
                case ExpressionType.New:
                    return this.ParseNewExpression(xElement);
                case ExpressionType.ListInit:
                    return this.ParseListInitExpression(xElement);
                case ExpressionType.MemberInit:
                    return this.ParseMemberInitExpression(xElement);
                case ExpressionType.TypeIs:
                    return this.ParseTypeBinaryExpression(xElement);
                case ExpressionType.Invoke:
                    return this.ParseInvocationExpression(xElement);
                case ExpressionType.Conditional:
                    return this.ParseConditionalExpression(xElement);
                case ExpressionType.NewArrayInit:
                case ExpressionType.NewArrayBounds:
                    return this.ParseNewArrayExpression(xElement, expressionType);
                case ExpressionType.Negate:
                case ExpressionType.NegateChecked:
                case ExpressionType.Not:
                case ExpressionType.Convert:
                case ExpressionType.ConvertChecked:
                case ExpressionType.ArrayLength:
                case ExpressionType.Quote:
                case ExpressionType.TypeAs:
                    return this.ParseUnaryExpression(xElement, expressionType);
                case ExpressionType.Add:
                case ExpressionType.AddChecked:
                case ExpressionType.Subtract:
                case ExpressionType.SubtractChecked:
                case ExpressionType.Multiply:
                case ExpressionType.MultiplyChecked:
                case ExpressionType.Divide:
                case ExpressionType.Modulo:
                case ExpressionType.And:
                case ExpressionType.AndAlso:
                case ExpressionType.Or:
                case ExpressionType.OrElse:
                case ExpressionType.LessThan:
                case ExpressionType.LessThanOrEqual:
                case ExpressionType.GreaterThan:
                case ExpressionType.GreaterThanOrEqual:
                case ExpressionType.Equal:
                case ExpressionType.NotEqual:
                case ExpressionType.Coalesce:
                case ExpressionType.ArrayIndex:
                case ExpressionType.RightShift:
                case ExpressionType.LeftShift:
                case ExpressionType.ExclusiveOr:
                    return this.ParseBinaryExpression(xElement, expressionType);
                default:
                    return null;
            }
        }
                                                    
        public Expression ToExpression(XElement xElement)
        {
            this.ParameterExpressions.Clear();
                
            return this.ParseGenerico<Expression>(xElement);
        }
                                                    
        public T ToExpression<T>(XElement xElement) where T: Expression
        {
            this.ParameterExpressions.Clear();
                
            return this.ParseGenerico<T>(xElement);
        }
                                                    
        #endregion
                                                        
        #endregion
        #region Miembros IConvertidor
                                                
        XElement IConvertidor.ToXElement(MemberInfo memberInfo)
        {
            return this.ToXElement(memberInfo);
        }
                                                    
        XElement IConvertidor.ToXElement(ElementInit elementInit)
        {
            return this.ToXElement(elementInit);
        }
                                                    
        XElement IConvertidor.ToXElement(MemberBinding memberBinding)
        {
            return this.ToXElement(memberBinding);
        }
                                                    
        XElement IConvertidor.ToXElement(Expression expression)
        {
            return this.ToXElement(expression);
        }
                                                
        MemberInfo IConvertidor.ToMemberInfo(XElement xElement)
        {
            return this.ToMemberInfo(xElement);
        }
                                                
        T IConvertidor.ToMemberInfo<T>(XElement xElement)
        {
            return this.ToMemberInfo<T>(xElement);
        }
                                                    
        ElementInit IConvertidor.ToElementInit(XElement xElement)
        {
            return this.ToElementInit(xElement);
        }
                                                    
        MemberBinding IConvertidor.ToMemberBinding(XElement xElement)
        {
            return this.ToMemberBinding(xElement);
        }
                                                
        T IConvertidor.ToMemberBinding<T>(XElement xElement)
        {
            return this.ToMemberBinding<T>(xElement);
        }
                                                    
        Expression IConvertidor.ToExpression(XElement xElement)
        {
            return this.ToExpression(xElement);
        }
                                                    
        T IConvertidor.ToExpression<T>(XElement xElement)
        {
            return this.ToExpression<T>(xElement);
        }
                                                                        
        #endregion
    }
    
    [Serializable]
    public class ColeccionSet<T> : IList<T>, IList, ICollection<T>, ICollection, IEnumerable<T>, IEnumerable, IBindingListView, IBindingList, ICancelAddNew, IRaiseItemChangedEvents, INotifyCollectionChanged, IQueryable<T>, IQueryable, IOrderedQueryable<T>, IOrderedQueryable
    {
        #region Campos
                                                            
        private int _indiceAgregarNuevo;
        private bool _estaFiltrado;
        private SimpleMonitor _monitorColeccionCambiada;
        private IList<T> _elementosOriginales;
        [NonSerialized]
        private PropertyDescriptorCollection _itemTypeProperties;
        [NonSerialized]
        private int _ultimoIndiceCambiado;
        [NonSerialized]
        private PropertyChangedEventHandler _propertyChanged;
        private Expression<Func<T, bool>> _filtroExpression;
        private IConvertidor _iConvertidor;
                                                                                    
        #endregion
        #region Constructores
                                        
        public ColeccionSet()
        {
            IQueryable iQueryable;
                                        
            this._elementosOriginales = new List<T>();
            this._elementos = this._elementosOriginales;
            iQueryable = this._elementosOriginales.AsQueryable();
            this._provider = iQueryable.Provider;
            this._expression = iQueryable.Expression;
            this.InicializarConstructor();
        }
                                                                                                    
        public ColeccionSet(IEnumerable<T> iEnumerable)
        {
            var iQueryable = iEnumerable as IQueryable<T>;
                                    
            if (iQueryable == null)
            {
                iQueryable = iEnumerable.AsQueryable();
            }
                                        
            this._elementosOriginales = new List<T>(iEnumerable);
            this._elementos = this._elementosOriginales;
            this._provider = iQueryable.Provider;
            this._expression = iQueryable.Expression;
            this.InicializarConstructor();
        }
                                    
        #endregion
        #region Eventos
                                                                                
        public event ListChangedEventHandler ListChanged
        {
            add
            {
                ListChangedEventHandler handler2;
                var listChanged = this._listChanged;
                                                                                
                do
                {
                    ListChangedEventHandler handler3;
                                                                                
                    handler2 = listChanged;
                    handler3 = (ListChangedEventHandler)Delegate.Combine(handler2, value);
                    listChanged = Interlocked.CompareExchange<ListChangedEventHandler>(ref this._listChanged, handler3, handler2);
                }
                while (listChanged != handler2);
            }
            remove
            {
                ListChangedEventHandler handler2;
                var listChanged = this._listChanged;
                                                                                
                do
                {
                    ListChangedEventHandler handler3;
                                                                                
                    handler2 = listChanged;
                    handler3 = (ListChangedEventHandler)Delegate.Remove(handler2, value);
                    listChanged = Interlocked.CompareExchange<ListChangedEventHandler>(ref this._listChanged, handler3, handler2);
                }
                while (listChanged != handler2);
            }
        }
        [NonSerialized]
        private ListChangedEventHandler _listChanged;
                                                                                
        public event NotifyCollectionChangedEventHandler CollectionChanged
        {
            add
            {
                NotifyCollectionChangedEventHandler handler2;
                var collectionChanged2 = this._collectionChanged;
                                                                                
                do
                {
                    NotifyCollectionChangedEventHandler handler3;
                                                                                
                    handler2 = collectionChanged2;
                    handler3 = (NotifyCollectionChangedEventHandler)Delegate.Combine(handler2, value);
                    collectionChanged2 = Interlocked.CompareExchange<NotifyCollectionChangedEventHandler>(ref this._collectionChanged, handler3, handler2);
                }
                while (collectionChanged2 != handler2);
            }
            remove
            {
                NotifyCollectionChangedEventHandler handler2;
                var collectionChanged2 = this._collectionChanged;
                                                                                
                do
                {
                    NotifyCollectionChangedEventHandler handler3;
                                                                                
                    handler2 = collectionChanged2;
                    handler3 = (NotifyCollectionChangedEventHandler)Delegate.Remove(handler2, value);
                    collectionChanged2 = Interlocked.CompareExchange<NotifyCollectionChangedEventHandler>(ref this._collectionChanged, handler3, handler2);
                }
                while (collectionChanged2 != handler2);
            }
        }
        [NonSerialized]
        private NotifyCollectionChangedEventHandler _collectionChanged;
                                                                                
        #endregion
        #region Propiedades
                                                                                
        private static bool TypeTTieneConstructorPredeterminado
        {
            get
            {
                var typeT = typeof(T);
                                                                                                    
                return (typeT.IsPrimitive || (typeT.GetConstructor(BindingFlags.CreateInstance | BindingFlags.Public | BindingFlags.Instance, null, new Type[0], null) != null));
            }
        }
                                                                                                    
        protected IList<T> Elementos
        {
            get
            {
                return this._elementos;
            }
        }
        private IList<T> _elementos;
                                                                                                    
        public bool LanzarEventosListaCambiada
        {
            get
            {
                return this._lanzarEventosListaCambiada;
            }
            set
            {
                if (this._lanzarEventosListaCambiada != value)
                {
                    this._lanzarEventosListaCambiada = value;
                }
            }
        }
        private bool _lanzarEventosListaCambiada;
                                                                                                    
        public bool AllowEdit
        {
            get
            {
                return this._allowEdit;
            }
            set
            {
                if (this._allowEdit != value)
                {
                    this._allowEdit = value;
                    this.SobreColeccionReinicializada();
                }
            }
        }
        private bool _allowEdit;
                                                                                                    
        public bool AllowNew
        {
            get
            {
                return this._allowNew;
            }
            set
            {
                if (this._elementos.IsReadOnly || !TypeTTieneConstructorPredeterminado)
                {
                    throw new NotSupportedException();
                }
                                                                    
                if (_allowNew != value)
                {
                    this._allowNew = value;
                    this.SobreColeccionReinicializada();
                }
            }
        }
        private bool _allowNew;
                                                                                                    
        public bool AllowRemove
        {
            get
            {
                return this._allowRemove;
            }
            set
            {
                if (this._elementos.IsReadOnly)
                {
                    throw new NotSupportedException();
                }
                                                                    
                if (this._allowRemove != value)
                {
                    this._allowRemove = value;
                    this.SobreColeccionReinicializada();
                }
            }
        }
        private bool _allowRemove;
                                                                                                    
        public bool IsSorted
        {
            get
            {
                return this._isSorted;
            }
        }
        private bool _isSorted;
                                                                                                    
        public T this[int indice]
        {
            get
            {
                return this._elementos[indice];
            }
            set
            {
                if (this._elementos.IsReadOnly)
                {
                    throw new NotSupportedException();
                }
                                                                                                    
                if ((indice < 0) || (indice >= this._elementos.Count))
                {
                    throw new ArgumentOutOfRangeException("indice");
                }
                                                                                                    
                this.ComprobarReentradaColeccionCambiada();
                                                                                                    
                var itemAnterior = this._elementos[indice];
                                                                                                    
                if (this._raisesItemChangedEvents)
                {
                    this.DesanclarPropiedadCambiada(itemAnterior);
                }
                                                                                                    
                this._elementos[indice] = value;
                                        
                if (this._estaFiltrado || this._isSorted)
                {
                    var indiceOriginales = this._elementosOriginales.IndexOf(itemAnterior);
                                        
                    this._elementosOriginales[indiceOriginales] = value;
                }                
                                                                                                    
                if (this._raisesItemChangedEvents)
                {
                    this.AnclarPropiedadCambiada(value);
                }
                                                                                                    
                if (this._lanzarEventosListaCambiada)
                {
                    this.SobreListaCambiada(new ListChangedEventArgs(ListChangedType.ItemChanged, indice));
                }
                                                                                                    
                this.SobreColeccionCambiada(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Replace, value, itemAnterior, indice));
            }
        }
                                                                                                    
        public bool RaisesItemChangedEvents
        {
            get
            {
                return this._raisesItemChangedEvents;
            }
        }
        private bool _raisesItemChangedEvents;
                                                                                                    
        public bool IsFixedSize
        {
            get
            {
                var iList = this._elementos as IList;
                                                                                                    
                if (iList != null)
                {
                    return iList.IsFixedSize;
                }
                                                                                                    
                return this._elementos.IsReadOnly;
            }
        }
                                                                                                    
        public bool IsReadOnly
        {
            get
            {
                return this._elementos.IsReadOnly;
            }
        }
                                                                                                    
        public int Count
        {
            get
            {
                return this._elementos.Count;
            }
        }
                                                                                                    
        public object SyncRoot
        {
            get
            {
                if (this._syncRoot == null)
                {
                    var iCollection = this._elementos as ICollection;
                                                                                                    
                    if (iCollection != null)
                    {
                        this._syncRoot = iCollection.SyncRoot;
                    }
                    else
                    {
                        Interlocked.CompareExchange<object>(ref this._syncRoot, new object(), null);
                    }
                }
                                                                                                    
                return this._syncRoot;
            }
        }
        [NonSerialized]
        private object _syncRoot;
                                                                                                    
        public string Filter
        {
            get
            {
                return this._filter;
            }
            set
            {
                if (this._filter != value)
                {
                    if (string.IsNullOrEmpty(value))
                    {
                        this.RemoveFilter();
                    }
                    else
                    {
                        this.ComprobarReentradaColeccionCambiada();
                        this.EndNew(this._indiceAgregarNuevo);
                        this._filtroExpression = this._iConvertidor.ToExpression<Expression<Func<T, bool>>>(XElement.Parse(value));
            
                        var iQueryable = this._elementosOriginales.AsQueryable().Where(this._filtroExpression);
                                        
                        if (this._isSorted && this._sortDescriptions != null)
                        {
                            this.Ejecutar(iQueryable.CrearOrdenamiento<T>(this._sortDescriptions), false);
                        }
                        else if (this._isSorted && this._sortProperty != null)
                        {
                            this.Ejecutar(iQueryable.CrearOrdenamiento<T>(this._sortProperty, this._sortDirection), false);
                        }
                        else
                        {
                            this.Ejecutar(iQueryable, false);
                        }
                                        
                        this._filter = value;
                        this._estaFiltrado = true;
                        this.SobreColeccionReinicializada();
                    }
                }
            }
        }
        private string _filter;
                                                                                                    
        public ListSortDirection SortDirection
        {
            get
            {
                return this._sortDirection;
            }
        }
        private ListSortDirection _sortDirection;
                                                                                                    
        public PropertyDescriptor SortProperty
        {
            get
            {
                return this._sortProperty;
            }
        }
        [NonSerialized]
        private PropertyDescriptor _sortProperty;
                                                                                                    
        public ListSortDescriptionCollection SortDescriptions
        {
            get
            {
                return this._sortDescriptions;
            }
        }
        [NonSerialized]
        private ListSortDescriptionCollection _sortDescriptions;
                                                                                            
        public bool IsSynchronized
        {
            get
            {
                return false;
            }
        }
                                                                                            
        public bool SupportsChangeNotification
        {
            get
            {
                return true;
            }
        }
                                                                                            
        public bool SupportsSearching
        {
            get
            {
                return true;
            }
        }
                                                                                            
        public bool SupportsSorting
        {
            get
            {
                return true;
            }
        }
                                                                                            
        public bool SupportsAdvancedSorting
        {
            get
            {
                return true;
            }
        }
                                                                                            
        public bool SupportsFiltering
        {
            get
            {
                return true;
            }
        }
                                            
        public IQueryProvider Provider
        {
            get
            {
                return this._provider;
            }
        }
        private IQueryProvider _provider;
                                            
        public Type ElementType
        {
            get
            {
                return this._elementType;
            }
        }
        private Type _elementType;
                                            
        public Expression Expression
        {
            get
            {
                return this._expression;
            }
        }
        private Expression _expression;
                                            
        #endregion
        #region Metodos
                                                                                                    
        private static bool EsObjetoCompatible(object valor)
        {
            return ((valor is T) || ((valor == null) && (default(T) == null)));
        }
                        
        private void ValoresPorDefecto()
        {
            this._filter = string.Empty;
            this._filtroExpression = null;
            this._estaFiltrado = false;
            this._sortDirection = ListSortDirection.Ascending;
            this._sortProperty = null;
            this._sortDescriptions = null;
            this._isSorted = false;
        }
                                                                                                   
        private void InicializarConstructor()
        {
            this._elementType = typeof(T);
            this._monitorColeccionCambiada = new SimpleMonitor();
            this._indiceAgregarNuevo = -1;
            this._lanzarEventosListaCambiada = true;
            this._ultimoIndiceCambiado = -1;
            this._allowEdit = true;
            this._allowRemove = !this._elementos.IsReadOnly;
            this._allowNew = !this._elementos.IsReadOnly && TypeTTieneConstructorPredeterminado;
            this._iConvertidor = new Convertidor();
            this.ValoresPorDefecto();
                                                            
            if (typeof(INotifyPropertyChanged).IsAssignableFrom(this._elementType))
            {
                this._raisesItemChangedEvents = true;
                                                                                                    
                for (var i = 0; i < this._elementos.Count; i++)
                {
                    this.AnclarPropiedadCambiada(this._elementos[i]);
                }
            }            
        }
                                                                                                    
        private void PropiedadCambiadaHija(object sender, PropertyChangedEventArgs e)
        { 
            if (!this.LanzarEventosListaCambiada)
            {
                return;
            }
                                                                                                    
            if (((sender == null) || (e == null)) || string.IsNullOrEmpty(e.PropertyName))
            {
                this.Reinicializar();
                                                                                                    
                return;
            }
                                                                                    
            T elemento;
                                                                                                    
            try
            {
                elemento = (T)sender;
            }
            catch (InvalidCastException)
            {
                this.Reinicializar();
                                                                                                    
                return;
            }
                                                                                                    
            var ultimoIndiceCambiado2 = this._ultimoIndiceCambiado;
                                                                                                    
            if ((ultimoIndiceCambiado2 >= 0) && (ultimoIndiceCambiado2 < this._elementos.Count))
            {
                var elemento2 = this._elementos[ultimoIndiceCambiado2];
                                                                                                    
                if (elemento2.Equals(elemento))
                {
                    goto Label_007B;
                }
            }
                                                                                                    
            ultimoIndiceCambiado2 = this._elementos.IndexOf(elemento);
            this._ultimoIndiceCambiado = ultimoIndiceCambiado2;
                                                                                                    
        Label_007B:
            if (ultimoIndiceCambiado2 == -1)
            {
                this.ComprobarReentradaColeccionCambiada();
                this.DesanclarPropiedadCambiada(elemento);
                this.SobreColeccionReinicializada();
            }
            else
            {
                if (this._itemTypeProperties == null)
                {
                    this._itemTypeProperties = TypeDescriptor.GetProperties(this._elementType);
                }
                                                                                                    
                this.SobreListaCambiada(new ListChangedEventArgs(ListChangedType.ItemChanged, ultimoIndiceCambiado2, this._itemTypeProperties.Find(e.PropertyName, true)));
                this.SobreColeccionCambiada(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Reset));
            }
        }
                                                                                                    
        private void DesanclarPropiedadCambiada(T elemento)
        {
            var iNotifyPropertyChanged = elemento as INotifyPropertyChanged;
                                                                                                    
            if ((iNotifyPropertyChanged != null) && (this._propertyChanged != null))
            {
                iNotifyPropertyChanged.PropertyChanged -= this._propertyChanged;
            }
        }
                                                                                                    
        private void AnclarPropiedadCambiada(T elemento)
        {
            var iNotifyPropertyChanged = elemento as INotifyPropertyChanged;
                                                                                                    
            if (iNotifyPropertyChanged != null)
            {
                if (this._propertyChanged == null)
                {
                    this._propertyChanged = new PropertyChangedEventHandler(this.PropiedadCambiadaHija);
                }
                                                                                                    
                iNotifyPropertyChanged.PropertyChanged += this._propertyChanged;
            }
        }
                                                                                            
        private void ComprobarReentradaColeccionCambiada()
        {
            if ((this._monitorColeccionCambiada.Ocupado && (this._collectionChanged != null)) && (this._collectionChanged.GetInvocationList().Length > 1))
            {
                throw new InvalidOperationException();
            }
        }
                                                                                
        private void SobreColeccionReinicializada()
        {
            if (this._lanzarEventosListaCambiada)
            {
                this.SobreListaCambiada(new ListChangedEventArgs(ListChangedType.Reset, -1));
            }
                                        
            this.SobreColeccionCambiada(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Reset));
        }
                                                    
        private void Ejecutar(IQueryable<T> iQueryable, bool originales)
        {
            var lista = iQueryable.ToList();
                                        
            if (originales)
            {
                if (this._raisesItemChangedEvents)
                {
                    for (var i = 0; i < this._elementosOriginales.Count; i++)
                    {
                        this.DesanclarPropiedadCambiada(this._elementosOriginales[i]);
                    }
                }
                                        
                this._elementosOriginales = lista;
                this._elementos = lista;
                            
                if (this._raisesItemChangedEvents)
                {
                    for (var i = 0; i < this._elementosOriginales.Count; i++)
                    {
                        this.AnclarPropiedadCambiada(this._elementosOriginales[i]);
                    }
                }
            }
            else
            {
                this._elementos = lista;
            }
                                    
            this._provider = iQueryable.Provider;
            this._expression = iQueryable.Expression;
        }
                        
        protected virtual void SobreListaCambiada(ListChangedEventArgs e)
        {
            if (this._listChanged != null)
            {
                this._listChanged(this, e);
            }
        }
                                                                                                    
        protected virtual void SobreColeccionCambiada(NotifyCollectionChangedEventArgs e)
        {
            if (this._collectionChanged != null)
            {
                this._monitorColeccionCambiada.Entrar();
                this._collectionChanged(this, e);
                this._monitorColeccionCambiada.Salir();
            }
        }
                                                                    
        public IEnumerator<T> GetEnumerator()
        {
            return this._elementos.GetEnumerator();
        }
                                                                                    
        public void Reinicializar()
        {
            this.ComprobarReentradaColeccionCambiada();
            this.SobreColeccionReinicializada();
        }
                                                                                    
        public void Reinicializar(int indice)
        {
            if ((indice < 0) || (indice >= this._elementos.Count))
            {
                throw new ArgumentOutOfRangeException("indice");
            }
                                                                                
            this.ComprobarReentradaColeccionCambiada();
                                                                                    
            if (this._lanzarEventosListaCambiada)
            {
                this.SobreListaCambiada(new ListChangedEventArgs(ListChangedType.ItemChanged, indice));
            }
                                                                                    
            this.SobreColeccionCambiada(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Reset));
        }
                                                                                    
        public void Ejecutar(IEnumerable<T> iEnumerable)
        {
            if (iEnumerable == null)
            {
                throw new ArgumentNullException("iEnumerable");
            }
                                                                                
            if (!this._allowNew || (!this._allowRemove && this._elementos.Count > 0))
            {
                throw new NotSupportedException();
            }
                                    
            var iQueryable = iEnumerable as IQueryable<T>;
                                    
            if (iQueryable == null)
            {
                iQueryable = iEnumerable.AsQueryable();
            }
                                    
            this.ComprobarReentradaColeccionCambiada();
            this.EndNew(this._indiceAgregarNuevo);
            this.Ejecutar(iQueryable, true);
            this.ValoresPorDefecto();
            this.SobreColeccionReinicializada();                        
        }
                
        public void Mover(int indiceAnterior, int indiceNuevo)
        {
            this.ComprobarReentradaColeccionCambiada();
            this.EndNew(this._indiceAgregarNuevo);
                                                            
            var elemento = this._elementos[indiceAnterior];
                                                            
            this._elementos.RemoveAt(indiceAnterior);
            this._elementos.Insert(indiceNuevo, elemento);
                                                            
            if (this._lanzarEventosListaCambiada)
            {
                this.SobreListaCambiada(new ListChangedEventArgs(ListChangedType.ItemMoved, indiceNuevo, indiceAnterior));
            }
                                                            
            this.SobreColeccionCambiada(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Move, elemento, indiceNuevo, indiceAnterior));
        }
                                                            
        public T AddNew()
        {
            if (TypeTTieneConstructorPredeterminado)
            {
                T elemento = Activator.CreateInstance<T>();
                this._indiceAgregarNuevo = this.Add(elemento);
                                                        
                return elemento;
            }
                                                        
            throw new NotSupportedException();
        }
                                                                                                    
        public void CancelNew(int indice)
        {
            if ((this._indiceAgregarNuevo >= 0) && (this._indiceAgregarNuevo == indice))
            {
                this.RemoveAt(this._indiceAgregarNuevo);
                this._indiceAgregarNuevo = -1;
            }
        }
                                                                                                    
        public void EndNew(int indice)
        {
            if ((this._indiceAgregarNuevo >= 0) && (this._indiceAgregarNuevo == indice))
            {
                this._indiceAgregarNuevo = -1;
            }
        }
                                                                                                    
        public void RemoveFilter()
        {
            if (this._estaFiltrado)
            {
                this.ComprobarReentradaColeccionCambiada();
                this.EndNew(this._indiceAgregarNuevo);
                                        
                if (this._isSorted && this._sortDescriptions != null)
                {
                    this.Ejecutar(this._elementosOriginales.AsQueryable().CrearOrdenamiento<T>(this._sortDescriptions), false);
                }
                else if (this._isSorted && this._sortProperty != null)
                {
                    this.Ejecutar(this._elementosOriginales.AsQueryable().CrearOrdenamiento<T>(this._sortProperty, this._sortDirection), false);
                }
                else
                {
                    this._elementos = this._elementosOriginales;
                }
                                        
                this._filter = string.Empty;
                this._estaFiltrado = false;              
                this.SobreColeccionReinicializada();
            }
        }
                                                                                                    
        public void RemoveSort()
        {
            if (this._isSorted)
            {
                this.ComprobarReentradaColeccionCambiada();
                this.EndNew(this._indiceAgregarNuevo);
                                                            
                if (this._estaFiltrado)
                {
                    this.Ejecutar(this._elementosOriginales.AsQueryable().Where(this._filtroExpression), false);
                }
                else
                {
                    this._elementos = this._elementosOriginales;
                }
                                                                                                    
                this._sortDirection = ListSortDirection.Ascending;
                this._sortProperty = null;
                this._sortDescriptions = null;
                this._isSorted = false;
                this.SobreColeccionReinicializada();
            }
        }
                                                                                    
        public void ApplySort(PropertyDescriptor propertyDescriptor, ListSortDirection listSortDirection)
        {
            if (propertyDescriptor == null)
            {
                throw new ArgumentNullException("propertyDescriptor");
            }
                                                            
            if (this._elementType != propertyDescriptor.ComponentType)
            {
                throw new ArgumentOutOfRangeException("propertyDescriptor");
            }            
                                                            
            this.ComprobarReentradaColeccionCambiada();
            this.EndNew(this._indiceAgregarNuevo);
                                        
            IQueryable<T> iQueriable;
                                        
            if (this._estaFiltrado)
            {
                iQueriable = this._elementosOriginales.AsQueryable().Where(this._filtroExpression);
            }
            else
            {
                iQueriable = this._elementos.AsQueryable();
            }
                
            this.Ejecutar(iQueriable.CrearOrdenamiento<T>(propertyDescriptor, listSortDirection), false);
            this._sortProperty = propertyDescriptor;
            this._sortDirection = listSortDirection;
            this._sortDescriptions = null;
            this._isSorted = true;
            this.SobreColeccionReinicializada();
        }
                                                                                    
        public void ApplySort(ListSortDescriptionCollection listSortDescriptionCollection)
        {
            if (listSortDescriptionCollection == null)
            {
                throw new ArgumentNullException("listSortDescriptionCollection");
            }
                                                                                    
            if (listSortDescriptionCollection.Count > 0)
            {
                this.ComprobarReentradaColeccionCambiada();
                this.EndNew(this._indiceAgregarNuevo);
                                        
                IQueryable<T> iQueriable;
                                        
                if (this._estaFiltrado)
                {
                    iQueriable = this._elementosOriginales.AsQueryable().Where(this._filtroExpression);
                }
                else
                {
                    iQueriable = this._elementos.AsQueryable();
                }
                
                this.Ejecutar(iQueriable.CrearOrdenamiento<T>(listSortDescriptionCollection), false);
                this._sortProperty = listSortDescriptionCollection[0].PropertyDescriptor;
                this._sortDirection = listSortDescriptionCollection[0].SortDirection;
                this._sortDescriptions = listSortDescriptionCollection;
                this._isSorted = true;
                this.SobreColeccionReinicializada();
            }
        }
                                                                                    
        public int Find(PropertyDescriptor descriptorPropiedad, object valor)
        {
            if (descriptorPropiedad == null)
            {
                throw new ArgumentNullException("descriptorPropiedad");
            }
                                                                                
            for (var i = 0; i < this._elementos.Count; i++)
            {
                var valor2 = descriptorPropiedad.GetValue(this._elementos[i]);
                                                                                    
                if (valor2 != null && valor2.Equals(valor))
                {
                    return i;
                }
            }
                                                                                    
            return -1;
        }
                                                                                      
        public bool Insert(int indice, T elemento)
        {
            if (!this._allowNew || (indice < 0) || (indice > this._elementos.Count) || this._elementosOriginales.Contains(elemento))
            {
                return false;
            }
                                                                                    
            this.ComprobarReentradaColeccionCambiada();
            this.EndNew(this._indiceAgregarNuevo);
            this._elementos.Insert(indice, elemento);
                                        
            if (this._estaFiltrado || this._isSorted)
            {
                this._elementosOriginales.Insert(indice, elemento);
            }
                                                                                                    
            if (this._raisesItemChangedEvents)
            {
                this.AnclarPropiedadCambiada(elemento);
            }
                                                                                                    
            if (this._lanzarEventosListaCambiada)
            {
                this.SobreListaCambiada(new ListChangedEventArgs(ListChangedType.ItemAdded, indice));
            }
                                                                                                    
            this.SobreColeccionCambiada(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add, elemento, indice));
                                                                                                    
            return true;
        }    
                                                                                                   
        public bool Insert(int index, object valor)
        {
            return (EsObjetoCompatible(valor) && this.Insert(index, (T)valor));
        }
                                                                                                
        public int Add(T elemento)
        {
            return this.Insert(this._elementos.Count, elemento) ? (this._elementos.Count - 1) : -1;
        }
                                                                                                    
        public int Add(object valor)
        {
            return this.Insert(this._elementos.Count, valor) ? (this._elementos.Count - 1) : -1;
        }
                                                                  
        public bool RemoveAt(int indice)
        {
            if ((!this._allowRemove && ((this._indiceAgregarNuevo < 0) || (this._indiceAgregarNuevo != indice))) || (indice < 0) || (indice >= this._elementos.Count))
            {
                return false;
            }
                                                                                    
            this.ComprobarReentradaColeccionCambiada();
            this.EndNew(this._indiceAgregarNuevo);
                                                                                    
            var elemento = this._elementos[indice];
                                                                                                    
            if (this._raisesItemChangedEvents)
            {
                this.DesanclarPropiedadCambiada(elemento);
            }
                                                                                                    
            this._elementos.RemoveAt(indice);
                                        
            if (this._estaFiltrado || this._isSorted)
            {
                this._elementosOriginales.Remove(elemento);
            }
                                                                                                    
            if (this._lanzarEventosListaCambiada)
            {
                this.SobreListaCambiada(new ListChangedEventArgs(ListChangedType.ItemDeleted, indice));
            }
                                                                                                    
            this.SobreColeccionCambiada(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove, elemento, indice));
                                                                                                    
            return true;
        }
                                                                                                    
        public bool Remove(T elemento)
        {
            return this.RemoveAt(this._elementos.IndexOf(elemento));
        }
                                                                                                    
        public bool Remove(object value)
        {
            return (EsObjetoCompatible(value) && this.Remove((T)value));
        }
                                                                
        public void Clear()
        {
            if (!this._allowRemove)
            {
                throw new NotSupportedException();
            }
                                                                
            this.ComprobarReentradaColeccionCambiada();
            this.EndNew(this._indiceAgregarNuevo);
                                                                
            if (this._raisesItemChangedEvents)
            {
                for (var i = 0; i < this._elementosOriginales.Count; i++)
                {
                    this.DesanclarPropiedadCambiada(this._elementosOriginales[i]);
                }
            }
                                                                
            this._elementos.Clear();
            this._elementosOriginales.Clear();
            this.ValoresPorDefecto();
            this.SobreColeccionReinicializada();
        }
                                                                
        public bool Contains(T elemento)
        {
            return this._elementos.Contains(elemento);
        }
                                                                
        public bool Contains(object valor)
        {
            return (EsObjetoCompatible(valor) && this.Contains((T)valor));
        }
                                                                
        public int IndexOf(T elemento)
        {
            return this._elementos.IndexOf(elemento);
        }
                                                                
        public int IndexOf(object valor)
        {
            return EsObjetoCompatible(valor) ? this.IndexOf((T)valor) : -1;
        }
                                                                
        public void AddIndex(PropertyDescriptor propertyDescriptor)
        {
            if (propertyDescriptor == null)
            {
                throw new ArgumentNullException("propertyDescriptor");
            }
                                                                                            
            throw new NotSupportedException();
        }
                                                                                            
        public void RemoveIndex(PropertyDescriptor propertyDescriptor)
        {
            if (propertyDescriptor == null)
            {
                throw new ArgumentNullException("propertyDescriptor");
            }
                                                                                            
            throw new NotSupportedException();
        }
                                                                                
        public void CopyTo(T[] elementos, int indice)
        {
            this._elementos.CopyTo(elementos, indice);
        }
                                                                                    
        public void CopyTo(Array array, int indice)
        {
            if (array == null)
            {
                throw new ArgumentNullException("array");
            }
                                                                                                    
            if (array.Rank != 1 || array.GetLowerBound(0) != 0)
            {
                throw new ArgumentOutOfRangeException("array");
            }
                                                                                                    
            if (indice < 0)
            {
                throw new ArgumentOutOfRangeException("indice");
            }
                                                                                                    
            if ((array.Length - indice) < this.Count)
            {
                throw new ArgumentOutOfRangeException("array");
            }
                                                                                                    
            var localArray = array as T[];
                                                                                                    
            if (localArray != null)
            {
                this.CopyTo(localArray, indice);
            }
            else
            {
                var elementType = array.GetType().GetElementType();
                object[] objectoArreglo;
                                                        
                if ((!elementType.IsAssignableFrom(this._elementType) && !this._elementType.IsAssignableFrom(elementType)) || (objectoArreglo = array as object[]) == null)
                {
                    throw new ArgumentOutOfRangeException("array");
                }
                                                                                                    
                try
                {
                    for (var i = 0; i < this._elementos.Count; i++)
                    {
                        objectoArreglo[indice++] = this._elementos[i];
                    }
                }
                catch (ArrayTypeMismatchException)
                {
                    throw new ArgumentOutOfRangeException("array");
                }
            }
        }
                                                            
        #endregion
        #region Miembros IList<T>
                                                                                                    
        int IList<T>.IndexOf(T elemento)
        {
            return this.IndexOf(elemento);
        }
                                                                                                    
        void IList<T>.Insert(int indice, T elemento)
        {
            this.Insert(indice, elemento);
        }
                                                                                                    
        void IList<T>.RemoveAt(int indice)
        {
            this.RemoveAt(indice);
        }
                                                                                                    
        T IList<T>.this[int indice]
        {
            get
            {
                return this[indice];
            }
            set
            {
                this[indice] = value;
            }
        }
                                                                                                    
        #endregion
        #region Miembros IList
                                                                    
        int IList.Add(object valor)
        {
            return this.Add(valor);
        }
                                                                    
        void IList.Clear()
        {
            this.Clear();
        }
                                                                    
        bool IList.Contains(object valor)
        {
            return this.Contains(valor);
        }
                                                                    
        int IList.IndexOf(object valor)
        {
            return this.IndexOf(valor);
        }
                                                                    
        void IList.Insert(int indice, object valor)
        {
            this.Insert(indice, valor);
        }
                                                                    
        void IList.Remove(object valor)
        {
            this.Remove(valor);
        }
                                                                    
        void IList.RemoveAt(int indice)
        {
            this.RemoveAt(indice);
        }
                                                                    
        bool IList.IsFixedSize
        {
            get
            {
                return this.IsFixedSize;
            }
        }
                                                                    
        bool IList.IsReadOnly
        {
            get
            {
                return this.IsReadOnly;
            }
        }
                                                                    
        object IList.this[int indice]
        {
            get
            {
                return this._elementos[indice];
            }
            set
            {
                if (!EsObjetoCompatible(value))
                {
                    throw new ArgumentOutOfRangeException("value");
                }
                                                                    
                this[indice] = (T)value;
            }
        }
                                                                    
        #endregion
        #region Miembros ICollection<T>
                                                                                                    
        void ICollection<T>.Add(T elemento)
        {
            this.Add(elemento);
        }
                                                                                                    
        void ICollection<T>.Clear()
        {
            this.Clear();
        }
                                                                                                    
        bool ICollection<T>.Contains(T elemento)
        {
            return this.Contains(elemento);
        }
                                                                                                    
        void ICollection<T>.CopyTo(T[] elementos, int indice)
        {
            this.CopyTo(elementos, indice);
        }
                                                                                                    
        bool ICollection<T>.Remove(T elemento)
        {
            return this.Remove(elemento);
        }
                                                                                                    
        int ICollection<T>.Count
        {
            get
            {
                return this.Count;
            }
        }
                                                                                                    
        bool ICollection<T>.IsReadOnly
        {
            get
            {
                return this.IsReadOnly;
            }
        }
                                                                                                    
        #endregion
        #region Miembros ICollection
                                                                    
        void ICollection.CopyTo(Array array, int indice)
        {
            this.CopyTo(array, indice);
        }
                                                                    
        int ICollection.Count
        {
            get
            {
                return this.Count;
            }
        }
                                                                    
        bool ICollection.IsSynchronized
        {
            get
            {
                return this.IsSynchronized;
            }
        }
                                                                    
        object ICollection.SyncRoot
        {
            get
            {
                return this.SyncRoot;
            }
        }
                                                                    
        #endregion
        #region Miembros IEnumerable<T>
                                                                                                    
        IEnumerator<T> IEnumerable<T>.GetEnumerator()
        {
            return this.GetEnumerator();
        }
                                                                                                    
        #endregion
        #region Miembros IEnumerable
                                                                                                    
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
                                                                                                    
        #endregion
        #region Miembros IBindingListView
                                                                                                    
        string IBindingListView.Filter
        {
            get
            {
                return this.Filter;
            }
            set
            {
                this.Filter = value;
            }
        }
                                                                                                    
        ListSortDescriptionCollection IBindingListView.SortDescriptions
        {
            get
            {
                return this.SortDescriptions;
            }
        }
                                                                                                    
        bool IBindingListView.SupportsAdvancedSorting
        {
            get
            {
                return this.SupportsAdvancedSorting;
            }
        }
                                                                                                    
        bool IBindingListView.SupportsFiltering
        {
            get
            {
                return this.SupportsFiltering;
            }
        }
                                                                                            
        void IBindingListView.ApplySort(ListSortDescriptionCollection listSortDescriptionCollection)
        {
            this.ApplySort(listSortDescriptionCollection);
        }
                                                                                                    
        void IBindingListView.RemoveFilter()
        {
            this.RemoveFilter();
        }
                                                                                                    
        #endregion
        #region Miembros IBindingList
                                                                                
        event ListChangedEventHandler IBindingList.ListChanged
        {
            add
            {
                this.ListChanged += value;
            }
            remove
            {
                this.ListChanged -= value;
            }
        }
                                                                                                    
        bool IBindingList.AllowEdit
        {
            get
            {
                return this.AllowEdit;
            }
        }
                                                                                                    
        bool IBindingList.AllowNew
        {
            get
            {
                return this.AllowNew;
            }
        }
                                                                                                    
        bool IBindingList.AllowRemove
        {
            get
            {
                return this.AllowRemove;
            }
        }
                                                                                                    
        bool IBindingList.IsSorted
        {
            get
            {
                return this.IsSorted;
            }
        }
                                                                                                    
        ListSortDirection IBindingList.SortDirection
        {
            get
            {
                return this.SortDirection;
            }
        }
                                                                                                    
        PropertyDescriptor IBindingList.SortProperty
        {
            get
            {
                return this.SortProperty;
            }
        }
                                                                                                    
        bool IBindingList.SupportsChangeNotification
        {
            get
            {
                return this.SupportsChangeNotification;
            }
        }
                                                                                                    
        bool IBindingList.SupportsSearching
        {
            get
            {
                return this.SupportsSearching;
            }
        }
                                                                                                    
        bool IBindingList.SupportsSorting
        {
            get
            {
                return this.SupportsSorting;
            }
        }
                                                                                            
        void IBindingList.AddIndex(PropertyDescriptor propertyDescriptor)
        {
            this.AddIndex(propertyDescriptor);
        }
                                                                                            
        object IBindingList.AddNew()
        {
            return this.AddNew();
        }
                                                                                                    
        void IBindingList.ApplySort(PropertyDescriptor propertyDescriptor, ListSortDirection listSortDirection)
        {
            this.ApplySort(propertyDescriptor, listSortDirection);
        }
                                                                                                    
        int IBindingList.Find(PropertyDescriptor propertyDescriptor, object valor)
        {
            return this.Find(propertyDescriptor, valor);
        }
                                                                                            
        void IBindingList.RemoveIndex(PropertyDescriptor propertyDescriptor)
        {
            this.RemoveIndex(propertyDescriptor);
        }
                                                                                            
        void IBindingList.RemoveSort()
        {
            this.RemoveSort();
        }
                                                                                                    
        #endregion
        #region Miembros ICancelAddNew
                                                                                                    
        void ICancelAddNew.CancelNew(int indice)
        {
            this.CancelNew(indice);
        }
                                                                                                    
        void ICancelAddNew.EndNew(int indice)
        {
            this.EndNew(indice);
        }
                                                                                                    
        #endregion
        #region Miembros IRaiseItemChangedEvents
                                                                                                    
        bool IRaiseItemChangedEvents.RaisesItemChangedEvents
        {
            get
            {
                return this.RaisesItemChangedEvents;
            }
        }
                                                                                                    
        #endregion
        #region Miembros INotifyCollectionChanged
                                                                                
        event NotifyCollectionChangedEventHandler INotifyCollectionChanged.CollectionChanged
        {
            add
            {
                this.CollectionChanged += value;
            }
            remove
            {
                this.CollectionChanged -= value;
            }
        }
                                                                                            
        #endregion
        #region Miembros IQueryable
                                            
        IQueryProvider IQueryable.Provider
        {
            get
            {
                return this.Provider;
            }
        }
                                            
        Type IQueryable.ElementType
        {
            get
            {
                return this.ElementType;
            }
        }
                                            
        Expression IQueryable.Expression
        {
            get
            {
                return this.Expression;
            }
        }
                                            
        #endregion
        #region Clases
                                                                                    
        [Serializable]
        private class SimpleMonitor
        {
            #region Campos
                                                                                                    
            private int _cantidadOcupada;
                                                                                                    
            #endregion
            #region Propiedades
                                                                                                    
            public bool Ocupado
            {
                get
                {
                    return this._cantidadOcupada > 0;
                }
            }
                                                                                                    
            #endregion
            #region Metodos
                                                                                                    
            public void Entrar()
            {
                this._cantidadOcupada++;
            }
                                                                                            
            public void Salir()
            {
                this._cantidadOcupada--;
            }
                
            #endregion
        }
                        
        #endregion
    }
    
    public class ExpresionCondicional
    {
        #region Campos
            
        private Dictionary<string, List<BinaryExpression>> _condicionesBinaryExpression;
        private Dictionary<string, List<MethodCallExpression>> _condicionesMethodCallExpression;
        private static readonly Type _tipoString = typeof(string);
        private static readonly MethodInfo _metodoStartsWith = _tipoString.GetMethod("StartsWith", new Type[] { _tipoString });
        private static readonly MethodInfo _metodoEndsWith = _tipoString.GetMethod("EndsWith", new Type[] { _tipoString });
            
        #endregion
        #region Constructores
            
        public ExpresionCondicional()
        {
            this._condicionesBinaryExpression = new Dictionary<string, List<BinaryExpression>>();
            this._condicionesMethodCallExpression = new Dictionary<string, List<MethodCallExpression>>();
        }
            
        #endregion
        #region Metodos
            
        public void Actualizar(BinaryExpression binaryExpression)
        {
            if (binaryExpression == null)
            {
            	throw new ArgumentNullException("binaryExpression");
            }
            
            List<BinaryExpression> listaBinaryExpression;
            var memberExpression = binaryExpression.Left as MemberExpression;
            
            if (memberExpression.Member.Name == "Value" && memberExpression.Member.DeclaringType.IsValueType && memberExpression.Member.DeclaringType.IsGenericType)
            {
                memberExpression = memberExpression.Expression as MemberExpression;
            }
            
            if (!this._condicionesBinaryExpression.TryGetValue(memberExpression.Member.Name, out listaBinaryExpression))
            {
                listaBinaryExpression = new List<BinaryExpression>();
                this._condicionesBinaryExpression.Add(memberExpression.Member.Name, listaBinaryExpression);
            }
            
            listaBinaryExpression.RemoveAll(ex => ex.NodeType == binaryExpression.NodeType);
            listaBinaryExpression.Add(binaryExpression);
        }
            
        public void Actualizar(MethodCallExpression methodCallExpression)
        {
            if (methodCallExpression == null)
            {
            	throw new ArgumentNullException("methodCallExpression");
            }
            
            List<MethodCallExpression> listaMethodCallExpression;
            var memberExpression = (MemberExpression)methodCallExpression.Object;
            
            if (!this._condicionesMethodCallExpression.TryGetValue(memberExpression.Member.Name, out listaMethodCallExpression))
            {
                listaMethodCallExpression = new List<MethodCallExpression>();
                this._condicionesMethodCallExpression.Add(memberExpression.Member.Name, listaMethodCallExpression);
            }
            
            listaMethodCallExpression.RemoveAll(ex => ex.Method == methodCallExpression.Method);
            listaMethodCallExpression.Add(methodCallExpression);
        }
            
        public void Actualizar(ExpressionType expressionType, Expression izquierda, Expression derecha)
        {
            switch (expressionType)
            {
                case ExpressionType.NotEqual:
                    this.Actualizar(Expression.NotEqual(izquierda, derecha));
                    break;
                case ExpressionType.Equal:
                    this.Actualizar(Expression.Equal(izquierda, derecha));
                    break;
                case ExpressionType.GreaterThan:
                    this.Actualizar(Expression.GreaterThan(izquierda, derecha));
                    break;
                case ExpressionType.GreaterThanOrEqual:
                    this.Actualizar(Expression.GreaterThanOrEqual(izquierda, derecha));
                    break;
                case ExpressionType.LessThan:
                    this.Actualizar(Expression.LessThan(izquierda, derecha));
                    break;
                case ExpressionType.LessThanOrEqual:
                    this.Actualizar(Expression.LessThanOrEqual(izquierda, derecha));
                    break;
            }
        }
            
        public void Actualizar(MethodInfo methodInfo, MemberExpression memberExpression, ConstantExpression constantExpression)
        {
            if (methodInfo == _metodoStartsWith)
            {
                this.Actualizar(Expression.Call(memberExpression, _metodoStartsWith, constantExpression));
            }
            else if (methodInfo == _metodoEndsWith)
            {
                this.Actualizar(Expression.Call(memberExpression, _metodoEndsWith, constantExpression));
            }
        }
            
        public Expression ToExpression()
        {
            Expression expression = null;
            string nombrePropiedad = null;
            
            if (this._condicionesBinaryExpression.Count > 0)
            {
                foreach (var condicion in this._condicionesBinaryExpression)
                {
                    if (condicion.Key != nombrePropiedad)
                    {
                        var memberExpression = condicion.Value[0].Left as MemberExpression;
            
                        if (memberExpression.Member.Name == "Value" && memberExpression.Member.DeclaringType.IsValueType && memberExpression.Member.DeclaringType.IsGenericType)
                        {
                            memberExpression = memberExpression.Expression as MemberExpression;
                        }
            
                        if (memberExpression.Type.IsValueType && memberExpression.Type.IsGenericType)
                        {
                            var binaryExpressionNulo = Expression.NotEqual(memberExpression, Expression.Constant(null));
            
                            if (expression == null)
                            {
                                expression = binaryExpressionNulo;
                            }
                            else
                            {
                                expression = Expression.AndAlso(binaryExpressionNulo, expression);
                            }
            
                            nombrePropiedad = condicion.Key;
                        }
                    }
            
                    foreach (var binaryExpression in condicion.Value)
                    {
                        if (expression == null)
                        {
                            expression = binaryExpression;
                        }
                        else
                        {
                            expression = Expression.AndAlso(expression, binaryExpression);
                        }
                    }
                }
            }
            
            if (this._condicionesMethodCallExpression.Count > 0)
            {
                foreach (var condicion in this._condicionesMethodCallExpression)
                {
                    if (condicion.Key != nombrePropiedad)
                    {
                        var binaryExpressionNulo = Expression.NotEqual(condicion.Value[0].Object, Expression.Constant(null));
            
                        if (expression == null)
                        {
                            expression = binaryExpressionNulo;
                        }
                        else
                        {
                            expression = Expression.AndAlso(binaryExpressionNulo, expression);
                        }
            
                        nombrePropiedad = condicion.Key;
                    }
            
                    foreach (var methodCallExpression in condicion.Value)
                    {
                        if (expression == null)
                        {
                            expression = methodCallExpression;
                        }
                        else
                        {
                            expression = Expression.AndAlso(expression, methodCallExpression);
                        }
                    }
                }
            }        
           
            return expression;
        }
            
        public bool Eliminar(ExpressionType expressionType, MemberExpression memberExpression)
        {
            if (memberExpression == null)
            {
                throw new ArgumentNullException("memberExpression");
            }
        
            List<BinaryExpression> listaBinaryExpression;
            
            if (this._condicionesBinaryExpression.TryGetValue(memberExpression.Member.Name, out listaBinaryExpression))
            {
                return listaBinaryExpression.RemoveAll(ex => ex.NodeType == expressionType) > 0;
            }
            
            return false;
        }
            
        public bool Eliminar(MethodInfo methodInfo, MemberExpression memberExpression)
        {
            if (memberExpression == null)
            {
                throw new ArgumentNullException("memberExpression");
            }
        
            List<MethodCallExpression> listaMethodCallExpression;
            
            if (this._condicionesMethodCallExpression.TryGetValue(memberExpression.Member.Name, out listaMethodCallExpression))
            {
                return listaMethodCallExpression.RemoveAll(ex => ex.Method == methodInfo) > 0;
            }
            
            return false;
        }
            
        public void Limpiar()
        {
            this._condicionesBinaryExpression.Clear();
            this._condicionesMethodCallExpression.Clear();
        }
            
        public bool TratarObtenerValor(ExpressionType expressionType, MemberExpression memberExpression, out ConstantExpression constantExpression)
        {
            List<BinaryExpression> listaBinaryExpression;
            
            constantExpression = null;
            
            if (this._condicionesBinaryExpression.TryGetValue(memberExpression.Member.Name, out listaBinaryExpression))
            {
                var binaryExpression = listaBinaryExpression.Find(ex => ex.NodeType == expressionType);
            
                if (binaryExpression != null)
                {
                    constantExpression = binaryExpression.Right as ConstantExpression;
                }
            }
            
            return constantExpression != null;
        }
            
        public bool TratarObtenerValor(MethodInfo methodInfo, MemberExpression memberExpression, out ConstantExpression constantExpression)
        {
            List<MethodCallExpression> listaMethodCallExpression;
            
            constantExpression = null;
            
            if (this._condicionesMethodCallExpression.TryGetValue(memberExpression.Member.Name, out listaMethodCallExpression))
            {
                var methodCallExpression = listaMethodCallExpression.Find(ex => ex.Method == methodInfo);
                        
                if (methodCallExpression != null)
                {
                    constantExpression = methodCallExpression.Arguments[0] as ConstantExpression;
                }
            }
            
            return constantExpression != null;
        }
            
        #endregion
    }
}
